require 'sinatra/base'
require 'sinatra/assetpack'
require 'sinatra/reloader'
require "yaml"
require "haml"
require 'coffee-script' #also requires therubyracer gem!


Features vs. Bugs
========================================================

Features
--------------------------------------------------------
- Create shapes from a js console or via the gui
  - circles (defined by a center point + radius)
  - ovals (defined by a center point and a x and y radii)
  - lines segments (defined by a start and end point)
  - arc segments (defined by a center point, a start point and an end point)

- Create shapes quickly with keyboard modifier shortcuts
  - polygons via the create line segment command + the shift key (defined by a series of line segments)

- click and drag paper movement (creates a google maps-like scrolling effect)

- click and drag point movement (allows points to be repositioned to modify existing designs)
  - snap to points (points snaps to nearby points when dragging and merge when dropped)
  - coradial constraints* (*that work sometimes but are not exactly reliable)


Bugs and Feature Improvements
--------------------------------------------------------

DONE (previous Top Priority ++7% items)

  - Shape deletion [0 hr 30 min]
    - prevent wild fire deletion of all connected shapes. Only delete the currently selected shape. If a point's deletion is prevented by other shapes not currently being deleted hold off on deleting that point.

  - Shape + subserviant point Selection [1 hr 15 min]
    - select element and its points when creating or selecting an element.
    - When selecting a point if it is part of the currently selected element do not unselect the element
    - prevent selecting an element until the current element has _created = true

  - actually hide the context menu (isn't working atm) [freebee, included in shape and subserviant point selection]

  - delete is once again broken due to the new selection system [ 0 hr 45 min ]

  - Cancel
    - shapes->cancel. cancels interactive create? deletes the shape unless its created?
    - cancel the current shape when creating a new shape via interactive create
    - esc keyboard shortcut for cancel


Top Priority Bugs ++7%

  - point merge should prefer explicit to implicit (ie merging a explicit point with a implicit should result in a explicit point)

  - the mouse sometimes gets offset to the right of where the elements are being positioned.. wtf?

  - arc non-dragged points should not snap to other points when moving (breaks the coradial illusion)
  - deleting an arc does not delete it's coradial constraint
  - deleting an arc does not delete it's guides

  - create arc - click to create center point, click and drag to create 2nd point and bug.
  - create line - click to create first point, click to create second point and bug.
    - bug: shape's points get deleted somehow and element is either non-visible or deleted

  - artifacting of points in svg. Happens on Geordie's box as well. WTF?

  - Arc + clockwise + angle < 180 degrees results in the wrong arc (about a incorrect center point). Why? How do we fix this?

  - sometimes in arc creation you need to click twice before you place the 3rd point


Missing Features
--------------------------------------------------------

- Dimension tool UI and programatic interfaces ++5%
  - drag the element to change it's line offset
    - dragging text (make it a full fledged shape??) [DONE]
    - dragging line element [DONE]
  - edit the dimension size
    - clicking the text opens a field overlaying the text [DONE]
    - the field is saved by pressing enter or deselecting. [DONE]
    - the field is regex'd as a measurement [DONE]
    - whenever a valid measurement is entered the dimension size updates. [DONE]
  - alt dimension ui: line has padding at either end, end caps are inside and symetrical (?)
  - text sizing
    - blank area should match number of digits (text method: getSize() -> $v)
    - vertical dimensions should have less room for the measurement numbers then horizontal dimensions.
  - dimension lines should select when a dimension text is selected.

- Zoom ++4%
  - keyboard shortcuts (ctrl +, ctrl -)
  - gui buttons
  - scroll wheel

- SVG should automatically scale and resize to take up the full screen ++2%

- File Tab ++9%
  - redo + undo
    - point.split(options, lines, constraints) -> splits the given lines (and eventually constraints) off into a new point which by default is is in ui create (dragged by the user). Required for undoing point merges.
  - save as + load

- Constraint Solver
  - initial implementation of constraints ++30%
  - resulting bugs and feature improvements ++40%

- QTip2 Tutorial ++3%
  - choose a shape you wish to create.
  - draw you shape on the screen by clicking to place each of it's points.
  - you can now create more shapes or click on an existing shape or point to move it.

To Do List
========================================================

Everything Else
  - dimension tool (shape)
  - show guides on select. hide guides on deselect (unless it's being created)
  - file tab (save, load, undo, redo) <- (just the ui)
  - save to svg
  - load well-formed svg
  - export to dxf/dwg
  - guide points? (for ovals extra drag points?)
    - excluded from the points and shapes arrays
  - oval drag and drop math so that drag is on the ellipse, not rx/ry
  - oval drag points on each axis (including rotation) (guides)

Very Low (probably bs) Priority box o' shit
  - load poorly-formed svg or fail with a message box
  - add a list of shapes constrained to each point (merging in coincident code?)
  - 2 point tangental arcs
  - 3 point circles
  - refactor shape drag and drop and sketch dragging to share code
  - make a constraint class that extends sketch extension
  - merging coradial constraints

Done
  - hold shift while making a line to create a polygon of lines
  - handle point create events where the click happens off the point (don't fucking scroll!)
  - side bar checkbox to switch major / minor curve
  - refactor lines to use shape.coffee
  - refactor arcs to use shape.coffee
  - basic ovals implementation
  - wrap all shape functions with the expected "this" context.
  - merge coincident points.
  - points merge properly on initial drag
  - refactor drag and drop to share code between arc dragging, circle dragging, and point dragging
  - delete shape
  - make points into proper objects like shapes
  - handle point merging for coradial constraints

